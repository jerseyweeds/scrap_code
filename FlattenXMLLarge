import xml.etree.ElementTree as ET
import csv
import glob
import os

def stream_xml(xml_path, csv_output):
    # Check if the output file exists and delete it
    if os.path.exists(csv_output):
        os.remove(csv_output)

    with open(csv_output, mode='w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(['Parent', 'Child', 'value'])

        # Initialize the parent stack and a set to track unique relationships
        parent_stack = []
        seen_relationships = set()

        # Use iterparse to stream the XML
        context = ET.iterparse(xml_path, events=('start', 'end'))

        for event, elem in context:
            if event == 'start':
                if parent_stack:
                    relationship = (parent_stack[-1], elem.tag, 1)
                    if relationship not in seen_relationships:
                        csv_writer.writerow(relationship)
                        seen_relationships.add(relationship)
                parent_stack.append(elem.tag)
            elif event == 'end':
                parent_stack.pop()
                elem.clear()  # Clear the element to free up memory

def process_all_xml_files(folder_path):
    # Search for all files matching *analytics*.xml in the given folder
    xml_files = glob.glob(os.path.join(folder_path, '*analytics*.xml'))
    
    for xml_file in xml_files:
        # Define output file path
        output_file = 'structure_' + os.path.basename(xml_file) + '.csv'
        
        # Stream the XML and write to CSV
        stream_xml(xml_file, output_file)
        print(f"Processed {xml_file} and outputted to {output_file}")

# Define the folder path
folder_path = 'path/to/your/folder'

# Process all XML files in the folder
process_all_xml_files(folder_path)
