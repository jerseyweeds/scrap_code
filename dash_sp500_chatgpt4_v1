import pandas as pd
import dash
from dash import dcc, html, Input, Output, State, dash_table
import plotly.express as px

# Sample dataframe
df = pd.DataFrame({
    'company_name': ['A', 'A', 'B', 'B', 'C', 'C'],
    'date': ['2021-01', '2021-02', '2021-01', '2021-02', '2021-01', '2021-02'],
    'sector': ['Tech', 'Tech', 'Finance', 'Finance', 'Health', 'Health'],
    'sales': [100, 110, 120, 115, 130, 135],
    'market_cap': [1000, 1100, 900, 920, 800, 820]
})

# Initialize Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    dcc.Dropdown(
        id='sector-dropdown',
        options=[{'label': sector, 'value': sector} for sector in df['sector'].unique()],
        value='Tech',  # default value
        multi=False
    ),
    html.Button('Reset', id='reset-button'),
    dcc.Graph(id='line-chart'),
    dash_table.DataTable(
        id='data-table',
        page_size=10
    )
])

@app.callback(
    [Output('line-chart', 'figure'),
     Output('data-table', 'data'),
     Output('data-table', 'columns'),
     Output('sector-dropdown', 'value')],
    [Input('sector-dropdown', 'value'),
     Input('line-chart', 'relayoutData'),
     Input('reset-button', 'n_clicks')],
    [State('sector-dropdown', 'value')]
)
def update_chart(selected_sector, relayoutData, n_clicks, current_sector):
    # Check if reset button was clicked
    if n_clicks and n_clicks > 0:
        selected_sector = 'Tech'  # Set to default value

    # Filter data by selected sector
    filtered_df = df[df['sector'] == selected_sector]

    # Calculate the sum of market caps divided by the sum of sales for each date
    grouped_df = filtered_df.groupby('date').apply(lambda x: x['market_cap'].sum() / x['sales'].sum()).reset_index()
    grouped_df.columns = ['date', 'ratio']

    # Generate line chart
    fig = px.line(grouped_df, x='date', y='ratio', title=f'Market Cap to Sales Ratio Over Time ({selected_sector})')

    # Calculate market cap to sales ratio for each company and date
    filtered_df['ratio'] = filtered_df['market_cap'] / filtered_df['sales']

    # Pivot DataFrame for transposed table
    pivoted_df = filtered_df.pivot(index='company_name', columns='date', values='ratio').reset_index()

    # Prepare data and columns for DataTable
    table_data = pivoted_df.to_dict('records')
    table_columns = [{'name': str(i), 'id': str(i)} for i in pivoted_df.columns]

    return fig, table_data, table_columns, selected_sector

if __name__ == '__main__':
    app.run_server(debug=True)
